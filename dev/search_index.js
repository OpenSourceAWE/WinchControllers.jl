var documenterSearchIndex = {"docs":
[{"location":"components/#Generic-Components","page":"Generic Components","title":"Generic Components","text":"","category":"section"},{"location":"components/#Integrator","page":"Generic Components","title":"Integrator","text":"","category":"section"},{"location":"components/#WinchControllers.Integrator","page":"Generic Components","title":"WinchControllers.Integrator","text":"mutable struct Integrator\n\nDiscrete integrator with external reset.\n\nFields\n\ndt::Float64\ni::Float64: Default: 1.0\noutput::Float64: Default: 0.0\nlast_output::Float64: Default: 0.0\n\nExample\n\nint = Integrator(0.05, 2, 3)      # dt, integration constant, initial output  \ninput = 2\nfor i in 1:3\n    out = calc_output(int, input) # calculate the output\n    println(out)\n    on_timer(int)                 # must be called on each time-step\nend\nreset(int, 3)                     # reset the integrator to the initial state\n\n\n\n\n\n","category":"type"},{"location":"components/#WinchControllers.Integrator-2","page":"Generic Components","title":"WinchControllers.Integrator","text":"function Integrator(dt, i=1.0, x0=0.0)\n\nConstructor for discrete integrator with external reset.\n\nParameters\n\ndt: time-step [s]\ni:  integration constant\nx0: initial and last output\n\nReturns\n\na new struct of type Integrator\n\n\n\n\n\n","category":"type"},{"location":"components/#Base.reset","page":"Generic Components","title":"Base.reset","text":"reset(int::Integrator, x0=0.0)\n\nReset the integrator int to the value x0.\n\nParameters\n\nint::Integrator: An integrator struct\nx0: default value =0.0; initial and last output\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"function"},{"location":"components/#WinchControllers.calc_output-Tuple{Integrator, Any}","page":"Generic Components","title":"WinchControllers.calc_output","text":"calc_output(int::Integrator, input)\n\nCalculate and return the output without updating last_output.\n\nParameters\n\nint::Integrator: An integrator struct\ninput: The input value\n\nReturns\n\nthe output value\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.on_timer-Tuple{Integrator}","page":"Generic Components","title":"WinchControllers.on_timer","text":"on_timer(int::Integrator)\n\nUpdate the field last_output. Must be called once per time-step.\n\nParameters\n\nint::Integrator: An integrator struct\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"components/#UnitDelay","page":"Generic Components","title":"UnitDelay","text":"","category":"section"},{"location":"components/#WinchControllers.UnitDelay","page":"Generic Components","title":"WinchControllers.UnitDelay","text":"mutable struct UnitDelay\n\nUnitDelay, delay the input signal by one time step.\n\nFields\n\nlast_output::Float64: Default: 0\nlast_input::Float64: Default: 0\n\nExample\n\nud = UnitDelay()\nfor i in 1:3\n    out = calc_output(ud, i) # updates the input and calculates the output\n    println(out)\n    on_timer(ud)             # next time-step\nend\n\n\n\n\n\n","category":"type"},{"location":"components/#Base.reset-Tuple{UnitDelay}","page":"Generic Components","title":"Base.reset","text":"reset(ud::UnitDelay)\n\nReset the last_input and last_output of the struct ud to zero.\n\nParameters\n\nud::UnitDelay: A UnitDelay struct\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.calc_output-Tuple{UnitDelay, Any}","page":"Generic Components","title":"WinchControllers.calc_output","text":"calc_output(ud::UnitDelay, input)\n\nCalculate and return the output and update the last_input, but not the last_output.\n\nParameters\n\nint::UnitDelay: A UnitDelay struct\ninput: The input value\n\nReturns\n\nthe last output\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.on_timer-Tuple{UnitDelay}","page":"Generic Components","title":"WinchControllers.on_timer","text":"on_timer(ud::UnitDelay)\n\nUpdate the field last_output. Must be called once per time-step.\n\nParameters\n\nud::UnitDelay: A UnitDelay struct\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"components/#RateLimiter","page":"Generic Components","title":"RateLimiter","text":"","category":"section"},{"location":"components/#WinchControllers.RateLimiter","page":"Generic Components","title":"WinchControllers.RateLimiter","text":"mutable struct RateLimiter\n\nLimit the rate of change of the output signal (return value of calc_output) to ± limit. Unit of limit: 1/s.\n\nFields\n\ndt::Float64: Default: 0.05\nlimit::Float64: Default: 1\noutput::Float64: Default: 0\nlast_output::Float64: Default: 0\n\nExample\n\nusing WinchControllers, ControlPlots\nrl = RateLimiter(1.0, 0.8)\ninput =  [0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0]\nout = zeros(16)\nfor i in 1:16\n    out[i] = calc_output(rl, input[i])\n    on_timer(rl)\nend\nplot(1:16, [input, out]; labels=[\"input\", \"output\"])\n\n(Image: rate_limiter).\n\n\n\n\n\n","category":"type"},{"location":"components/#WinchControllers.RateLimiter-2","page":"Generic Components","title":"WinchControllers.RateLimiter","text":"RateLimiter(dt, limit=1.0, x0=0.0)\n\nParameters\n\ndt: the time-step [s]\nlimit: the rate limit, default: 1.0 [1/s]\nx0: the initial output, default: 0.0\n\nReturns\n\na struct of type RateLimiter\n\n\n\n\n\n","category":"type"},{"location":"components/#Base.reset-2","page":"Generic Components","title":"Base.reset","text":"reset(rl::RateLimiter, x0=0.0)\n\nReset the output and last_output of the struct ud to x0.\n\nParameters\n\nrl::RateLimiter: A RateLimiter struct\nx0: the initial value of the output signal\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"function"},{"location":"components/#WinchControllers.calc_output-Tuple{RateLimiter, Any}","page":"Generic Components","title":"WinchControllers.calc_output","text":"calc_output(rl::RateLimiter, input)\n\nCalculate and return the output, but not the last_output.\n\nParameters\n\nrl::RateLimiter: A RateLimiter struct\ninput: The input value\n\nReturns\n\nthe new output\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.on_timer-Tuple{RateLimiter}","page":"Generic Components","title":"WinchControllers.on_timer","text":"on_timer(rl::RateLimiter)\n\nUpdate the field last_output. Must be called once per time-step.\n\nParameters\n\nrl::RateLimiter: A RateLimiter struct\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"components/#Mixer_2CH","page":"Generic Components","title":"Mixer_2CH","text":"","category":"section"},{"location":"components/#WinchControllers.Mixer_2CH","page":"Generic Components","title":"WinchControllers.Mixer_2CH","text":"mutable struct Mixer_2CH\n\nMix two analog inputs.  It selects either input a or input b depending on the value of the digital input and implements  soft switching with a blend time t_blend. Implements the following block diagram: (Image: mixer_2ch).\n\nFields\n\ndt::Float64\nt_blend::Float64: Default: 1.0\nfactor_b::Float64: Default: 0\nselect_b::Bool: Default: false\n\nExample\n\nusing WinchControllers, Test\n\nm2 = Mixer_2CH(0.2, 1.0) # dt=0.2s, t_blend = 1.0s\nx = ones(10)\ny = 2*x\nout = zeros(10)\nfor i in 1:length(x)\n    in1=x[i]\n    in2=y[i]\n    out[i] = calc_output(m2, x[i], y[i])\n    select_b(m2, i > 2)\n    on_timer(m2)\nend\n@test all(out .≈ [1.0, 1.0, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.0, 2.0])\n\n\n\n\n\n","category":"type"},{"location":"components/#WinchControllers.Mixer_2CH-Tuple{Any, Any}","page":"Generic Components","title":"WinchControllers.Mixer_2CH","text":"Mixer_2CH(dt, t_blend)\n\nConstructor for Mixer_2CH, a component for mixing two analog inputs.\n\nParameters\n\ndt: the time-step [s]\nt_blend: the time for blending over from one channel to the other [s]\n\nReturns\n\na struct of type Mixer_2CH\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.select_b-Tuple{Mixer_2CH, Bool}","page":"Generic Components","title":"WinchControllers.select_b","text":"select_b(m2::Mixer_2CH, select_b::Bool)\n\nSelect input a or b.\n\nParameters\n\nm2::Mixer_2CH: the two-channel mixer\nselect_b: if true, select channel b, otherwise select channel a\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.calc_output-Tuple{Mixer_2CH, Any, Any}","page":"Generic Components","title":"WinchControllers.calc_output","text":"calc_output(m2::Mixer_2CH, input_a, input_b)\n\nCalculate and return the output of the two channel mixer.\n\nParameters\n\nm2::Mixer_2CH: a two channel mixer component\ninput_a: input value of channel A\ninput_b: input value of channel B\n\nReturns\n\nthe output value\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.on_timer-Tuple{Mixer_2CH}","page":"Generic Components","title":"WinchControllers.on_timer","text":"on_timer(m2::Mixer_2CH)\n\nUpdate the field m2.factor_b. Must be called once per time-step.\n\nParameters\n\nm2::Mixer_2CH: a two channel mixer\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"components/#Mixer_3CH","page":"Generic Components","title":"Mixer_3CH","text":"","category":"section"},{"location":"components/#WinchControllers.Mixer_3CH","page":"Generic Components","title":"WinchControllers.Mixer_3CH","text":"mutable struct Mixer_3CH\n\nMix three analog inputs. It selects either input a or input b or input c depending on the values of the digital inputs  and implements soft switching with a blend time t_blend. Implements the following block diagram:   (Image: mixer_3ch).\n\nFields\n\ndt::Float64\nt_blend::Float64: Default: 1.0\nfactor_b::Float64: Default: 0\nfactor_c::Float64: Default: 0\nselect_b::Bool: Default: false\nselect_c::Bool: Default: false\n\nExample\n\nusing WinchControllers, ControlPlots\n\nTIME = range(0.0, 10, 501)\nSIN1 = sin.(TIME * 0.5 * 2pi) * 2\nSIN2 = sin.(TIME * 0.25 * 2pi)\nNOISE = (rand(501).-0.5) * 2\nmix3 = Mixer_3CH(10, 0.25)\nout  = zeros(501)\n\nfor i in 1:501                   # 10s with dt=0.02\n    if i == 150\n        select_b(mix3, true)\n    elseif i == 300\n        select_c(mix3, true)\n    elseif i == 450\n        select_c(mix3, false)        \n    end\n    out[i] = calc_output(mix3, SIN1[i], SIN2[i], NOISE[i])\n    on_timer(mix3)\nend\nplot(TIME, out)\n\n\n\n\n\n","category":"type"},{"location":"components/#WinchControllers.get_state-Tuple{Mixer_3CH}","page":"Generic Components","title":"WinchControllers.get_state","text":"function get_state(m3::Mixer_3CH)\n\nReturn the controller state as integer.\n\nReturns WinchControllerState as integer.\n\nwcsLowerForceControl = 0 # input b selected \nwcsSpeedControl = 1      # input a selected\nwcsUpperForceControl = 2 # input c selected\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.select_b-Tuple{Mixer_3CH, Bool}","page":"Generic Components","title":"WinchControllers.select_b","text":"select_b(m3::Mixer_3CH, select_b::Bool)\n\nMake input b the active input.\n\nTo make channel a the active input call:\n\nselect_b(m3, false)\nselect_c(m3, false)\n\nParameters\n\nm3::Mixer_3CH: the three-channel mixer\nselect_b: if true, select channel b\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.select_c-Tuple{Mixer_3CH, Bool}","page":"Generic Components","title":"WinchControllers.select_c","text":"select_c(m3::Mixer_3CH, select_c::Bool)\n\nMake input c the active input.\n\nParameters\n\nm3::Mixer_3CH: the three-channel mixer\nselect_c: if true, select channel c\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.calc_output-Tuple{Mixer_3CH, Any, Any, Any}","page":"Generic Components","title":"WinchControllers.calc_output","text":"calc_output(m3::Mixer_3CH, input_a, input_b, input_c)\n\nCalculate and return the output of the three channel mixer.\n\nParameters\n\nm3::Mixer_3CH: a three channel mixer component\ninput_a: input value of channel A\ninput_b: input value of channel B\ninput_c: input value of channel C\n\nReturns\n\nthe output value\n\n\n\n\n\n","category":"method"},{"location":"components/#WinchControllers.on_timer-Tuple{Mixer_3CH}","page":"Generic Components","title":"WinchControllers.on_timer","text":"on_timer(m3::Mixer_3CH)\n\nUpdate the fields m3.factor_b and m3.factor_c. Must be called once per time-step.\n\nParameters\n\nm3::Mixer_3CH: a three channel mixer\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#Utility-Functions-and-Macros","page":"Functions and Macros","title":"Utility Functions and Macros","text":"","category":"section"},{"location":"functions/#WinchControllers.@limit","page":"Functions and Macros","title":"WinchControllers.@limit","text":"macro limit(name, minmax, max=nothing)\n\nLimit the value of a variable. \n\nParameters:\n\nname: the name of the scalar variable that shall be limited\nminmax: if max is provided, this is the lower value to which the variable is clamped, otherwise it is the upper value\nmax: the upper value to which to limit the provided variable or nothing\n\nUsage:\n\n@limit x 1 4 # limits the value to the range    1 .. 4,  modifies x\n@limit x 10  # limits the value to the range -inf .. 10, modifies x\n\n\n\n\n\n","category":"macro"},{"location":"functions/#WinchControllers.saturate","page":"Functions and Macros","title":"WinchControllers.saturate","text":"saturate(value, min_, max_)\n\nCalculate a saturated value, that stays within the given limits. \n\nParameters:\n\nvalue: the input value\nmin_: the lower value to which it shall be clamped\nmax_: the upper value to which it shall be clamped\n\nReturns:\n\nthe clamped value\n\nRemark:\n\nconsider using the function clamp or the macro @limit instead\n\n\n\n\n\n","category":"function"},{"location":"functions/#WinchControllers.merge_angles","page":"Functions and Macros","title":"WinchControllers.merge_angles","text":"merge_angles(alpha, beta, factor_beta)\n\nCalculate the weighted average of two angles. The weight of beta, factor_beta must be between 0 and 1.\n\n\n\n\n\n","category":"function"},{"location":"functions/#WinchControllers.get_startup","page":"Functions and Macros","title":"WinchControllers.get_startup","text":"get_startup(wcs::WCSettings, samples)\n\nCreate a signal, that is rising with wcs.t_startup from zero to one and then stays constant.\n\nParameters:\n\nwcs: the winch controller settings\nsamples: the number of samples to create\n\nReturns:\n\na vector of length samples with the startup signal\n\n\n\n\n\n","category":"function"},{"location":"functions/#WinchControllers.get_triangle_wind","page":"Functions and Macros","title":"WinchControllers.get_triangle_wind","text":"get_triangle_wind(wcs::WCSettings, min, max, freq, samples)\n\nCreate a triangle wind signal, that varies between min and max with the given frequency.\n\nParameters:\n\nwcs: the winch controller settings\nmin: the minimum wind speed\nmax: the maximum wind speed\nfreq: the frequency of the triangle wave\nsamples: the number of samples to create\n\nReturns:\n\na vector of length samples with the triangle wind signal\n\n\n\n\n\n","category":"function"},{"location":"functions/#WinchControllers.rms","page":"Functions and Macros","title":"WinchControllers.rms","text":"rms(x)\n\nCompute the root mean square (RMS) of the input vector x.\n\nArguments\n\nx: A vector of numerical values.\n\nReturns\n\nThe root mean square value of the vector x, calculated as norm(x) / sqrt(length(x)).\n\n\n\n\n\n","category":"function"},{"location":"tests/#Tests","page":"Tests","title":"Tests","text":"","category":"section"},{"location":"tests/","page":"Tests","title":"Tests","text":"All tests can be executed using the command:","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"include(\"examples/menu.jl\")","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"Most of these tests are not yet unit tests.","category":"page"},{"location":"tests/#Requirements","page":"Tests","title":"Requirements","text":"","category":"section"},{"location":"tests/","page":"Tests","title":"Tests","text":"the force must never be below zero.\nthe max force shall not be above the nominal force of the winch, in this case 4000 N.\nthe absolute value of the acceleration must never exceed max_acc.\nthe oscillations after switching the active controller shall be low.\nthe maximum of the force error shall be low\nthe mean of the square of the speed error shall be low\nthe robustness for model errors (for example with respect to the inertia of the drum and the drum diameter) shall be high","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"Open question: can all these requirements be combined in two or three performance indicators, fornexample efficiency, robustness and damage? See also: Performance Indicators","category":"page"},{"location":"tests/#SpeedController","page":"Tests","title":"SpeedController","text":"","category":"section"},{"location":"tests/#SpeedController1","page":"Tests","title":"SpeedController1","text":"","category":"section"},{"location":"tests/","page":"Tests","title":"Tests","text":"This test assumes a wind speed that starts at zero and reaches its nominal value after 0.25s. The nominal value is a triangle signal between 4 and 8 m/s and a period time of 4s. The tether direction is aligned with the  wind direction, the set value for the reel-out speed is 4 m/s. This means when the nominal reel-out speed is reached, the apparent wind speed is between zero and 4 m/s. The force is proportional to the square of v_a.","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"(Image: test_speedcontroller1)","category":"page"},{"location":"tests/#SpeedController2","page":"Tests","title":"SpeedController2","text":"","category":"section"},{"location":"tests/","page":"Tests","title":"Tests","text":"This test is similar to the last test, but the set speed is calculated according to  v_ro = sqrtf * kv ,  where f is the measured tether force and kv is a constant that needs to be optimized for a given kite power system. This should allow optimal energy harvesting during reel-out.","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"(Image: test_speedcontroller1)","category":"page"},{"location":"tests/#ForceSpeedController","page":"Tests","title":"ForceSpeedController","text":"","category":"section"},{"location":"tests/#ForceSpeedController1","page":"Tests","title":"ForceSpeedController1","text":"","category":"section"},{"location":"tests/","page":"Tests","title":"Tests","text":"This controller tests the combination of the lower force controller with the speed controller for the reel-out phase, where the reel-out speed shall be proportional to the square-root of the force. The lower force limit was set to 1500N.","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"(Image: test_forcespeedcontroller1)","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"State","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"0. lower force controller active; 1. speed controller active","category":"page"},{"location":"tests/#ForceSpeedController2","page":"Tests","title":"ForceSpeedController2","text":"","category":"section"},{"location":"tests/","page":"Tests","title":"Tests","text":"This controller tests all controllers. The lower force limit was set to 350N, the upper force limit to 3800N. (Image: test_forcespeedcontroller1)","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"State","category":"page"},{"location":"tests/","page":"Tests","title":"Tests","text":"0. lower force controller active; 1. speed controller active;  2. upper force controller active  ","category":"page"},{"location":"tests/#Ideas","page":"Tests","title":"Ideas","text":"","category":"section"},{"location":"tests/","page":"Tests","title":"Tests","text":"add torque controlled winch (which will require a modified controller)\nadd static tether model\nlinearize the winch+tether models\ncreate bode plots\nanalyze the stability\nadd auto-tuning script","category":"page"},{"location":"performance_indicators/#Performance-Indicators","page":"Performance Indicators","title":"Performance Indicators","text":"","category":"section"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"The force error, the speed error and the control effort should be taken into account.","category":"page"},{"location":"performance_indicators/#Relative-force-error","page":"Performance Indicators","title":"Relative force error","text":"","category":"section"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"The relative force error is the maximum of the norm of the force errors, based on all samples where one of the force controllers was active, divided by the nominal winch force F_mathrmmax, as formula:","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"F_mathrmerr = frac1F_mathrmmax max F-F_mathrmset","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"The reason to use the maximum here is that it must be avoided that the force goes below zero and also that it exceeds the maximum tether force.","category":"page"},{"location":"performance_indicators/#Relative-velocity-error","page":"Performance Indicators","title":"Relative velocity error","text":"","category":"section"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"The relative velocity error is the root mean square error (RMSE) of the velocity, based on all samples where one of the force controllers was active, divided by the average winch speed barv, as formula:","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"v_mathrmerr = frac1barvsqrtfrac1n sum_i=1^n (v-v_mathrmset)^2","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"with barv = frac1n sum_i=1^n lvert v_mathrmset rvert","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"The reason to use the mean square error for the velocity is that in this mode of operation the error only reduces the power output. Short peak errors are usually not a problem.","category":"page"},{"location":"performance_indicators/#Damage","page":"Performance Indicators","title":"Damage","text":"","category":"section"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"While the performance shall be maximized, the damage shall be minimized. Here, a simple damage model is presented,","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"epsilon = Deltaleft((1-zeta)left(fracmax aa_mathrmmaxright)^2+zeta left(fracmathrmrms(j)a_mathrmmax^2right)^4right)","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":",","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"where a is the actual acceleration, a_max the specified, maximal acceleration, mathrmrms(j) the root-mean-square of the jerk, the derivative of the acceleration, Delta the damage that occurs at a=a_mathrmmax and zeta the jerk factor. The default values used are Delta=005 and zeta = 09, but in the end this value needs to be determined based on the specification of the Winch. Control-codesign can be used to determine this parameter.","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"Using the forth potence of the jerk has proven to be effective in suppressing any oscillations and reducing overshoot of the controller while keeping it fast and stable.","category":"page"},{"location":"performance_indicators/#Combined-performance","page":"Performance Indicators","title":"Combined performance","text":"","category":"section"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"The combined performance indicator gamma in the range of 0..1 is defined as","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"gamma = 1 - frac125(15F_mathrmerr + v_mathrmerr)-epsilon","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":",","category":"page"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"the average of the error of the speed and the force controllers minus the damage caused by the acceleration of the winch. The force error has a slightly higher weight, because it is more critical for the controller performance.","category":"page"},{"location":"performance_indicators/#TODO","page":"Performance Indicators","title":"TODO","text":"","category":"section"},{"location":"performance_indicators/","page":"Performance Indicators","title":"Performance Indicators","text":"Quantify the robustness. This could be done by linearizing the system and checking gain and phase margin (for example), or by varying the model parameters (e.g. inertia of the drum) and checking if the combined performance stays above a required minimum. Possible robustness requirements:  \nthe controller must be robust for a model uncertainty of pm 15 inertia\nit must be robust against pm 5 drum radius\nit must be robust against 20ms delay in the force control loop","category":"page"},{"location":"settings/#Winchcontroller-Settings","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"","category":"section"},{"location":"settings/#Introductions","page":"Winchcontroller Settings","title":"Introductions","text":"","category":"section"},{"location":"settings/","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"Three .yaml files are needed to configure the winch controller:","category":"page"},{"location":"settings/","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"system.yaml\nsettings.yaml\nwc_settings.yaml","category":"page"},{"location":"settings/","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"The first file lists the yaml files that shall be used for the current project. The second file defines the model parameters. The third file defines the parameters of the winch controller. All of these files must be stored in the data directory.","category":"page"},{"location":"settings/","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"Example for a system.yaml file:","category":"page"},{"location":"settings/","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"system:\n    sim_settings:  \"settings.yaml\"       # model and simulator settings\n    wc_settings:   \"wc_settings.yaml\"    # winch controller settings","category":"page"},{"location":"settings/","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"The following sequence of commands will load the model and the winch controller settings for a given project:","category":"page"},{"location":"settings/","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"using WinchControllers, KiteUtils\n\nset_data_path(\"data\") # set the path where the yaml files are stored\nset = load_settings(\"system.yaml\")\nwcs = WCSettings()\nupdate(wcs)","category":"page"},{"location":"settings/","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"Both, set and wcs are simple structs. You can see the content of the struct by typing the name of one of these variables. If you type wcs. <TAB><TAB> you can see all elements of the wcs struct.","category":"page"},{"location":"settings/#The-file-wc_settings.yaml","page":"Winchcontroller Settings","title":"The file wc_settings.yaml","text":"","category":"section"},{"location":"settings/","page":"Winchcontroller Settings","title":"Winchcontroller Settings","text":"wc_settings:\n    dt: 0.02         # time step of the winch controller\n    test: false      # if true, a simplified formula for the calculation of v_set will be used\n    fac: 0.25        # factor for I and P of lower force controller\n    max_iter: 100    # max iterations limit for the PID solvers\n    iter: 0          # actual max iterations of the PID solvers\n    t_startup: 0.25  # startup time for soft start  \n    t_blend: 0.1     # blending time of the mixers in seconds\n    v_sat_error: 1.0 # limit of reel-out speed error, used by the input sat block of the speed controller\n    v_sat: 8.0       # limit of reel-out speed, used by the output sat block of the speed controller\n    v_ri_max: 8.0    # maximal reel-in speed [m/s]\n    p_speed: 0.125   # P value of the speed controller\n    i_speed: 4.0     # I value of the speed controller\n    kb_speed: 4.0    # back calculation constant for the anti-windup loop of the speed controller\n    kt_speed: 5.0    # tracking constant of the speed controller\n    vf_max: 2.75     # reel-out velocity where the set force should reach it's maximum\n    pf_low: 0.00014  # P constant of the lower force controller 0.013,  0.00014 also works\n    if_low: 0.01125  # I constant of the lower force controller 0.0225, 0.01125 also works\n    df_low: 0.0      # D constant of lower force controller 0.000017\n    nf_low:  0       # filter constant n of upper force controller\n    kbf_low: 8.0     # back calculation constant for the anti-windup loop of the lower force controller\n    ktf_low: 8.0     # tracking constant of the lower force controller\n    f_low: 350       # lower force limit [N]\n    f_reelin: 700    # set force for reel-in phase [N]\n    f_high: 3800     # upper force limit [N]\n    pf_high: 0.0002304 # P constant of upper force controller\n    if_high: 0.012     # I constant of upper force controller\n    df_high: 2.04e-5  # D constant of upper force controller\n    nf_high: 15.0    # filter constant n of upper force controller\n    kbf_high: 1.0    # back calculation constant for the anti-windup loop of the upper force controller\n    ktf_high: 10.0   # tracking constant of the upper force controller\n    winch_iter: 10   # iterations of the winch model\n    max_acc: 8.0     # maximal acceleration of the winch (derivative of the set value of the reel-out speed)\n    kv: 0.06         # proportional factor of the square root law, see function calc_vro","category":"page"},{"location":"autotuning/#Autotuning","page":"Autotuning","title":"Autotuning","text":"","category":"section"},{"location":"autotuning/#Introduction","page":"Autotuning","title":"Introduction","text":"","category":"section"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"The winch controller has 34 parameters (see Winchcontroller Settings). To determine and optimize all of them manually is time consuming and error prone, in particular if the physical system is changing. Therefore some form of automated tuning is desirable.","category":"page"},{"location":"autotuning/#Methodology","page":"Autotuning","title":"Methodology","text":"","category":"section"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"When the Performance Indicators are defined, an optimizer can be used to determine the controller parameters. The controller is using three PID controllers and a mixer. The following parameters are tuned automatically:","category":"page"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"    wcs.i_speed  # the speed controller gain\n    wcs.p_speed  # the speed controller proportional gain\n    wcs.t_blend  # the blending time for switching between controllers\n    wcs.pf_low   # the lower force controller gain\n    wcs.if_low   # the lower force controller proportional gain\n    wcs.pf_high  # the upper force controller gain\n    wcs.if_high  # the upper force controller integral gain\n    wcs.df_high  # the differential gain of the upper force controller","category":"page"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"The global, blackbox optimizer package NOMAD.jl is used for the optimization process, together with a test case that mimics extreme wind conditions. With a very simple system model it allows to find an optimal solution within less than one minute.","category":"page"},{"location":"autotuning/#Example","page":"Autotuning","title":"Example","text":"","category":"section"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"To run the auto-tuning script, launch Julia and execute:","category":"page"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"include(\"scripts/autotune.jl\")","category":"page"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"It will use the initial conditions provided in the file \"data/wcsettings.yaml\" and save the result in \"data/wcsettings_tuned.yaml\".","category":"page"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"All values are limited to hat x le 25xlandhat x le x25, where x is the original value and hat x the optimized value. Therefore make sure that none of the original values is zero.","category":"page"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"Example output:","category":"page"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"Blackbox evaluations:         897\nTotal model evaluations:      116337\nCache hits:                   107\nTotal number of evaluations:  1004\nAutotuning results: [14.999895, 0.125, 0.1090168, 2.24464e-5, 0.04164095, 3.83195e-5, 0.0271663, 4.0008673e-6]\nRunning simulation with tuned parameters...\n\nPerformance of force controllers: 92.86 %\nPerformance of speed controller:  93.82 %\nDamage with jerk:                 1.19 %\nCombined performance γ: 92.06 %\n\n[ Info: Tuned settings saved to data/wc_settings_tuned.yaml","category":"page"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"You can plot the result with the command:","category":"page"},{"location":"autotuning/","page":"Autotuning","title":"Autotuning","text":"plot(lg)","category":"page"},{"location":"winchcontroller/#Introduction","page":"Winchcontroller","title":"Introduction","text":"","category":"section"},{"location":"winchcontroller/","page":"Winchcontroller","title":"Winchcontroller","text":"For a kite power system, the reel-out speed of the winch must be controlled such that the maximal tether force is never exceeded, while the reel-out speed should be optimized for maximal power over the full cycle at wind speeds below rated wind speed. To keep the kite controllable, also a minimal tether force limit has to be kept. Depending on the mode of operation, one of the following three controllers is used:","category":"page"},{"location":"winchcontroller/#Enum-WinchControllerState","page":"Winchcontroller","title":"Enum WinchControllerState","text":"","category":"section"},{"location":"winchcontroller/#WinchControllers.WinchControllerState","page":"Winchcontroller","title":"WinchControllers.WinchControllerState","text":"@enum WinchControllerState\n\nThe three values that tell us which sub-controller is active.\n\nwcsLowerForceLimit = 0\nwcsSpeedControl = 1\nwcsUpperForceLimit = 2\n\n\n\n\n\n","category":"type"},{"location":"winchcontroller/#CalcVSetIn","page":"Winchcontroller","title":"CalcVSetIn","text":"","category":"section"},{"location":"winchcontroller/#WinchControllers.CalcVSetIn","page":"Winchcontroller","title":"WinchControllers.CalcVSetIn","text":"mutable struct CalcVSetIn\n\nComponent for calculation v_set_in, using soft switching.\n\nFields\n\nwcs::WCSettings\nmixer2::Mixer_2CH: mixer component. Default: Mixer_2CH(wcs.dt, wcs.t_blend)\ninput_a: Default: 0\ninput_b: Default: 0\n\n\n\n\n\n","category":"type"},{"location":"winchcontroller/#WinchControllers.CalcVSetIn-Tuple{WCSettings}","page":"Winchcontroller","title":"WinchControllers.CalcVSetIn","text":"function CalcVSetIn(wcs::WCSettings)\n\nConstructor for component for calculation v_set_in, using soft switching.\n\nParameters\n\nwcs:: WCSettings: settings struct with the winch controller settings\n\nReturns\n\na new struct of type CalcVSetIn\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_vset_pc-Tuple{CalcVSetIn, Any, Any}","page":"Winchcontroller","title":"WinchControllers.set_vset_pc","text":"set_vset_pc(cvi::CalcVSetIn, v_set_pc, force)\n\nParameters:\n\nforce:      measured tether force [N]\nv_set_pc: only used during manual operation or park-at-length. If it is nothing,             v_set_in is calculated as function of the force.\n\nReturns:\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.calc_output-Tuple{CalcVSetIn}","page":"Winchcontroller","title":"WinchControllers.calc_output","text":"calc_output(cvi::CalcVSetIn)\n\nParameters\n\ncvi::CalcVSetIn: A struct of type CalcVSetIn\n\nReturns\n\nv_set_in: Either v_set, or a value, proportional to the square root of the force.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.on_timer-Tuple{CalcVSetIn}","page":"Winchcontroller","title":"WinchControllers.on_timer","text":"on_timer(cvi::CalcVSetIn)\n\nUpdate the mixer. Must be called once per time-step.\n\nParameters\n\ncvi::CalcVSetIn: Reference to the CalcVSetIn component\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#SpeedController","page":"Winchcontroller","title":"SpeedController","text":"","category":"section"},{"location":"winchcontroller/#WinchControllers.SpeedController","page":"Winchcontroller","title":"WinchControllers.SpeedController","text":"mutable struct SpeedController\n\nPI controller for the reel-out speed of the winch in speed control mode. While inactive, it tracks the value from the tracking input. Back-calculation is used as anti-windup method and for tracking. The constant for anti-windup is K_b, the constant for tracking K_t Implements the following block diagram: (Image: speed_controller)\n\nFields\n\nwcs::WCSettings\nintegrator::Integrator: Default: Integrator(wcs.dt)\nlimiter::RateLimiter: Default: RateLimiter(wcs.dt, wcs.max_acc)\ndelay::UnitDelay: Default: UnitDelay()\nv_act::Float64: Default: 0\nv_set_in::Float64: Default: 0\ninactive::Bool: Default: true\ntracking::Float64: Default: 0\nv_err::Float64: Default: 0\nv_set_out::Float64: Default: 0\nsat_out::Float64: Default: 0\nres::StaticArraysCore.MVector{2, Float64}: Default: zeros(2)\n\n\n\n\n\n","category":"type"},{"location":"winchcontroller/#WinchControllers.SpeedController-Tuple{WCSettings}","page":"Winchcontroller","title":"WinchControllers.SpeedController","text":"SpeedController(wcs::WCSettings)\n\nConstructor for a SpeedController, based on the winch controller settings.\n\nParameters\n\nwcs::WCSettings: the winch controller settings struct\n\nReturns\n\na struct of type SpeedController\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_inactive-Tuple{SpeedController, Bool}","page":"Winchcontroller","title":"WinchControllers.set_inactive","text":"set_inactive(sc::SpeedController, inactive::Bool)\n\nDe-activate the speed controller if the parameter inactive is true, otherwise activate it and reset the integrator and the limiter.\n\nParameters\n\nsc::SpeedController: the speed controller to de-activate or activate\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_v_act-Tuple{SpeedController, Any}","page":"Winchcontroller","title":"WinchControllers.set_v_act","text":"set_v_act(sc::SpeedController, v_act)\n\nSet the actual reel-out speed of the speed controller sc to v_act.\n\nParameters\n\nsc::SpeedController: the speed controller\nv_act: the actual reel-out speed\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_v_set-Tuple{SpeedController, Any}","page":"Winchcontroller","title":"WinchControllers.set_v_set","text":"set_v_set(sc::SpeedController, v_set)\n\nSet the set speed of the speed controller sc to v_set.\n\nParameters\n\nsc::SpeedController: the speed controller\nv_set: the set value of the reel-out speed\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_v_set_in-Tuple{SpeedController, Any}","page":"Winchcontroller","title":"WinchControllers.set_v_set_in","text":"set_v_set_in(sc::SpeedController, v_set_in)\n\nSet the signal v_set_in of the speed controller to v_set_in.\n\nParameters\n\nsc::SpeedController: the speed controller\nv_set_in: the value to assign to the signal v_set_in\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_tracking-Tuple{SpeedController, Any}","page":"Winchcontroller","title":"WinchControllers.set_tracking","text":"set_tracking(sc::SpeedController, tracking)\n\nSet the signal tracking of the speed controller to tracking.\n\nParameters\n\nsc::SpeedController: the speed controller\ntracking: the value to assign to the signal tracking\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_v_set_out-Tuple{SpeedController}","page":"Winchcontroller","title":"WinchControllers.get_v_set_out","text":"get_v_set_out(sc::SpeedController)\n\nCalculate the output value of the controller by using a non-linear solver.\n\nParameters\n\nsc::SpeedController Reference to the SpeedController component\n\nReturns\n\nv_set_out: the synchronous speed, calculated by the controller\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_v_err-Tuple{SpeedController}","page":"Winchcontroller","title":"WinchControllers.get_v_err","text":"get_v_err(sc::SpeedController)\n\nCompute and return the velocity error for the given SpeedController instance sc.\n\nArguments\n\nsc::SpeedController: The speed controller object for which the velocity error is to be calculated.\n\nReturns\n\nThe velocity error v_err [m/s].  If the controller is inactive, it returns NaN.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.on_timer-Tuple{SpeedController}","page":"Winchcontroller","title":"WinchControllers.on_timer","text":"on_timer(sc::SpeedController)\n\nUpdate the SpeedController. Must be called once per time-step. \n\nParameters\n\nsc::SpeedController Reference to the SpeedController component\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#AbstractForceController","page":"Winchcontroller","title":"AbstractForceController","text":"","category":"section"},{"location":"winchcontroller/#WinchControllers.set_v_act-Tuple{WinchControllers.AbstractForceController, Any}","page":"Winchcontroller","title":"WinchControllers.set_v_act","text":"set_v_act(fc::AFC, v_act)\n\nSet the signal v_act of the force controller to v_act.\n\nParameters\n\nsc::AFC: abstract force controller\nv_act: the value to assign to the signal v_act\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_force-Tuple{WinchControllers.AbstractForceController, Any}","page":"Winchcontroller","title":"WinchControllers.set_force","text":"set_force(fc::AFC, force)\n\nSet the signal force of the force controller to force.\n\nParameters\n\nsc::AFC: abstract force controller\nforce: the value to assign to the signal force\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_reset-Tuple{WinchControllers.AbstractForceController, Any}","page":"Winchcontroller","title":"WinchControllers.set_reset","text":"set_reset(fc::AFC, reset)\n\nSet the signal reset of the force controller to reset and activate or de-activate the controller.\n\nParameters\n\nsc::AFC: abstract force controller\nreset: the value to assign to the signal reset\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_f_set-Tuple{WinchControllers.AbstractForceController, Any}","page":"Winchcontroller","title":"WinchControllers.set_f_set","text":"set_f_set(fc::AFC, f_set)\n\nSet the set force of the force controller to f_set.\n\nParameters\n\nsc::AFC: abstract force controller\nf_set: the value to assign to the signal f_set\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_v_sw-Tuple{WinchControllers.AbstractForceController, Any}","page":"Winchcontroller","title":"WinchControllers.set_v_sw","text":"set_v_sw(fc::AFC, v_sw)\n\nParameters\n\nsc::AFC: abstract force controller\nv_sw: the value to assign to the signal v_sw\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_tracking-Tuple{WinchControllers.AbstractForceController, Any}","page":"Winchcontroller","title":"WinchControllers.set_tracking","text":"set_tracking(fc::AFC, tracking)\n\nSet the signal tracking of the force controller to tracking.\n\nParameters\n\nsc::AFC: abstract force controller\ntracking: the value to assign to the signal tracking\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_v_set_out-Tuple{WinchControllers.AbstractForceController}","page":"Winchcontroller","title":"WinchControllers.get_v_set_out","text":"get_v_set_out(fc::AFC)\n\nCalculate the output value of the controller by using a non-linear solver.\n\nParameters\n\nfc::AFC: abstract force controller\n\nReturns\n\nv_set_out: the synchronous speed, calculated by the controller\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_f_err-Tuple{WinchControllers.AbstractForceController}","page":"Winchcontroller","title":"WinchControllers.get_f_err","text":"get_f_err(fc::AFC)\n\nGet the error of the force controller.\n\nParameters\n\nfc::AFC: abstract force controller\n\nReturns\n\nf_err: the error of the force controller\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#LowerForceController","page":"Winchcontroller","title":"LowerForceController","text":"","category":"section"},{"location":"winchcontroller/#WinchControllers.LowerForceController","page":"Winchcontroller","title":"WinchControllers.LowerForceController","text":"mutable struct LowerForceController <: AbstractForceController\n\nPI controller for the lower force of the tether. While inactive, it tracks the value from the tracking input. Back-calculation is used as anti-windup method and for tracking. The constant for anti-windup is K_b, the constant for tracking K_t Implements the following block diagram: (Image: lower_force_controller)\n\nFields\n\nwcs::WCSettings\nintegrator::Integrator: Default: Integrator(wcs.dt)\nint2::Integrator: Default: Integrator(wcs.dt)\nlimiter::RateLimiter: Default: RateLimiter(wcs.dt, wcs.max_acc)\ndelay::UnitDelay: Default: UnitDelay()\nreset::Bool: Default: false\nactive::Bool: Default: false\nforce::Float64: Default: 0\nf_set::Float64: Default: 0\nv_sw::Float64: Default: 0\nv_act::Float64: Default: 0\ntracking::Float64: Default: 0\nf_err::Float64: Default: 0\nlast_err::Float64: Default: 0\nv_set_out::Float64: Default: 0\nsat_out::Float64: Default: 0\nres::StaticArraysCore.MVector{3, Float64}: Default: zeros(3)\n\n\n\n\n\n","category":"type"},{"location":"winchcontroller/#WinchControllers.LowerForceController-Tuple{WCSettings}","page":"Winchcontroller","title":"WinchControllers.LowerForceController","text":"LowerForceController(wcs::WCSettings)\n\nConstructor for a LowerForceController, based on the winch controller settings.\n\nParameters\n\nwcs::WCSettings: the winch controller settings struct\n\nReturns\n\na struct of type LowerForceController\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_f_set_low-Tuple{LowerForceController}","page":"Winchcontroller","title":"WinchControllers.get_f_set_low","text":"get_f_set_low(lfc::LowerForceController)\n\nReturns the lower force setpoint for the given LowerForceController instance lfc.\n\nArguments\n\nlfc::LowerForceController: The lower force controller object from which to retrieve the setpoint.\n\nReturns\n\nThe lower force setpoint value associated with the controller.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.on_timer-Tuple{LowerForceController}","page":"Winchcontroller","title":"WinchControllers.on_timer","text":"on_timer(lfc::LowerForceController)\n\nCallback function that is triggered on a timer event for a LowerForceController instance. This function handles periodic updates or control logic that needs to be executed at regular intervals for the lower force controller.\n\nArguments\n\nlfc::LowerForceController: The instance of LowerForceController for which the timer event is handled.\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#UpperForceController","page":"Winchcontroller","title":"UpperForceController","text":"","category":"section"},{"location":"winchcontroller/#WinchControllers.UpperForceController","page":"Winchcontroller","title":"WinchControllers.UpperForceController","text":"mutable struct UpperForceController <: AbstractForceController\n\nPID controller for the upper force of the tether. While inactive, it tracks the value from the tracking input. Back-calculation is used as anti-windup method and for tracking. The constant for anti-windup is K_b, the constant for tracking K_t Implements the following block diagram: (Image: upper_force_controller)\n\nFields\n\nwcs::WCSettings\nintegrator::Integrator: Default: Integrator(wcs.dt)\nint2::Integrator: Default: Integrator(wcs.dt)\nlimiter::RateLimiter: Default: RateLimiter(wcs.dt, wcs.max_acc)\ndelay::UnitDelay: Default: UnitDelay()\nreset::Bool: Default: false\nactive::Bool: Default: false\nf_set::Float64: Default: 0\nv_sw::Float64: Default: 0\nv_act::Float64: Default: 0\nforce::Float64: Default: 0\ntracking::Float64: Default: 0\nf_err::Float64: Default: 0\nv_set_out::Float64: Default: 0\nsat_out::Float64: Default: 0\nres::StaticArraysCore.MVector{3, Float64}: Default: zeros(3)\n\nUsage\n\nCreate an instance to control the upper force limit in a winch system.\n\n\n\n\n\n","category":"type"},{"location":"winchcontroller/#WinchControllers.UpperForceController-Tuple{WCSettings}","page":"Winchcontroller","title":"WinchControllers.UpperForceController","text":"UpperForceController(wcs::WCSettings)\n\nCreates and returns an upper force controller using the provided WCSettings.\n\nArguments\n\nwcs::WCSettings: The settings structure containing configuration parameters for the winch controller.\n\nReturns\n\nAn instance of the upper force controller configured according to the provided settings.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_f_set_upper-Tuple{UpperForceController}","page":"Winchcontroller","title":"WinchControllers.get_f_set_upper","text":"get_f_set_upper(ufc::UpperForceController)\n\nReturns the setpoint force for the given UpperForceController instance ufc.\n\nArguments\n\nufc::UpperForceController: The upper force controller object from which to retrieve the force setpoint.\n\nReturns\n\nThe setpoint force of the upper force controller [N].\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.on_timer-Tuple{UpperForceController}","page":"Winchcontroller","title":"WinchControllers.on_timer","text":"on_timer(ufc::UpperForceController)\n\nCallback function that is triggered on a timer event for an UpperForceController instance. This function is used to perform periodic updates and checks related to the controller's operation.\n\nArguments\n\nufc::UpperForceController: The upper force controller instance on which the timer event is triggered.\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchController","page":"Winchcontroller","title":"WinchController","text":"","category":"section"},{"location":"winchcontroller/#WinchControllers.WinchController","page":"Winchcontroller","title":"WinchControllers.WinchController","text":"mutable struct WinchController\n\nBasic winch controller. Works in one of the three modes wcsLowerForceLimit, wcsSpeedControl and wcsUpperForceLimit.\n\nFields\n\nwcs::WCSettings\ntime::Float64: Default: 0\nv_set_pc::Union{Nothing, Float64}: Default: nothing\nv_set_in::Float64: Default: 0.0\nv_set_out::Float64: Default: 0.0\nv_set_ufc::Float64: Default: 0.0\nv_set_lfc::Float64: Default: 0.0\nv_set::Float64: Default: 0.0\nv_act::Float64: Default: 0.0\nforce::Float64: Default: 0.0\ncalc::CalcVSetIn: Default: CalcVSetIn(wcs)\nmix3::Mixer_3CH: Default: Mixer3CH(wcs.dt, wcs.tblend)\nsc::SpeedController: Default: SpeedController(wcs)\nlfc::LowerForceController: Default: LowerForceController(wcs)\nufc::UpperForceController: Default: UpperForceController(wcs)\n\n\n\n\n\n","category":"type"},{"location":"winchcontroller/#WinchControllers.WinchController-Tuple{WCSettings}","page":"Winchcontroller","title":"WinchControllers.WinchController","text":"WinchController(wcs::WCSettings)\n\nConstructor for a WinchController, based on the winch controller settings.\n\nParameters\n\nwcs::WCSettings: the winch controller settings struct\n\nReturns\n\na struct of type WinchController\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.calc_v_set-Tuple{WinchController, Any, Any, Any}","page":"Winchcontroller","title":"WinchControllers.calc_v_set","text":"calc_v_set(wc::WinchController, v_act, force, f_low; v_set_pc=nothing)\n\nCalculate the set velocity (v_set) for the winch.\n\nArguments\n\nwc::WinchController: The winch controller instance.\nv_act: The actual velocity of the winch.\nforce: The measured or estimated force on the winch.\nf_low: The lower force threshold.\nv_set_pc: (optional) Precomputed or externally provided set velocity. Defaults to nothing.\n\nReturns\n\nThe calculated set velocity for the winch.\n\nNotes\n\nThe function logic depend on the relationship between the actual force and the lower force threshold.\nIf v_set_pc is provided, it overrides the computed set velocity.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_set_force-Tuple{WinchController}","page":"Winchcontroller","title":"WinchControllers.get_set_force","text":"get_set_force(wc::WinchController)\n\nReturns the set force value of the WinchController instance wc.\n\nArguments\n\nwc::WinchController: The winch controller object for which the set force is to be retrieved.\n\nReturns\n\nThe set force value, or nothing if the state is not wcsLowerForceLimit or wcsUpperForceLimit.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_state-Tuple{WinchController}","page":"Winchcontroller","title":"WinchControllers.get_state","text":"get_state(wc::WinchController) -> @enum WinchControllerState\n\nReturns the current state of the given WinchController instance wc. The returned value typically represents the operational state or status of the winch controller, such as position, speed, or error status.\n\nArguments\n\nwc::WinchController: The winch controller object whose state is to be retrieved.\n\nReturns\n\n@enum WinchControllerState\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_status-Tuple{WinchController}","page":"Winchcontroller","title":"WinchControllers.get_status","text":"get_status(wc::WinchController)\n\nRetrieve the current status of the given WinchController instance for logging and debugging purposes.\n\nArguments\n\nwc::WinchController: The winch controller object whose status is to be retrieved.\n\nReturns\n\nThe current status of the winch controller, an array containing:\nreset: Boolean indicating if the controller is in reset state.\nactive: Boolean indicating if the controller is active.\nforce: The current set force value or zero if not set.\nf_set: The set force value.\nv_set_out: The output velocity set by the speed controller.\nv_set_ufc: The output velocity set by the upper force controller.\nv_set_lfc: The output velocity set by the lower force controller.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_v_err-Tuple{WinchController}","page":"Winchcontroller","title":"WinchControllers.get_v_err","text":"get_v_err(wc::WinchController)\n\nCompute and return the velocity error for the given WinchController instance sc.\n\nArguments\n\nwc::WinchController: The winch controller object for which the velocity error is to be calculated.\n\nReturns\n\nThe velocity error v_err [m/s].  If the speed controller is inactive, it returns NaN.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.on_timer-Tuple{WinchController}","page":"Winchcontroller","title":"WinchControllers.on_timer","text":"on_timer(wc::WinchController)\n\nCallback function that is triggered periodically by a timer event. This function is responsible for handling time-based  updates or actions for the given WinchController instance wc.\n\nArguments\n\nwc::WinchController: The winch controller instance to be updated.\n\nReturns\n\nNothing. This function is called for its side effects.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#Controller-Settings","page":"Winchcontroller","title":"Controller Settings","text":"","category":"section"},{"location":"winchcontroller/#WinchControllers.WCSettings","page":"Winchcontroller","title":"WinchControllers.WCSettings","text":"mutable struct WCSettings\n\nSettings of the WinchController. See also: Winchcontroller Settings.\n\nFields\n\ndt::Float64: timestep of the winch controller\ntest::Bool: set to true for running the unit tests Default: false\nfac::Float64: factor for I and P of lower force controller Default: 0.25\nmax_iter::Int64: max iterations limit for the PID solvers Default: 100\niter::Int64: actual max iterations of the PID solvers Default: 0\nt_startup::Float64: startup time for soft start Default: 0.25\nt_blend::Float64: blending time of the mixers in seconds Default: 0.25\nv_sat_error::Float64: limitation of the reel-out speed error, used by the input saturation block of the speed controller Default: 1.0\nv_sat::Float64: limitation of the reel-out speed , used by the output saturation block of the speed controller Default: 8.0\nv_ri_max::Float64: maximal reel-in speed [m/s] Default: 8.0\np_speed::Float64: P value of the speed controller Default: 0.125\ni_speed::Float64: I value of the speed controller Default: 4.0\nkb_speed::Float64: back calculation constant for the anti-windup loop of the speed controller Default: 4.0\nkt_speed::Float64: tracking constant of the speed controller Default: 5.0\nvf_max::Float64: reel-out velocity where the set force should reach it's maximum Default: 2.75\npf_low::Float64: P constant of the lower force controller Default: 0.000144\nif_low::Float64: I constant of the lower force controller Default: 0.0075 * 1.5\ndf_low::Float64: D constant of lower force controller Default: 2.0e-5 * 1.7\nnf_low::Float64: filter constant n of upper force controller Default: 7.0\nkbf_low::Float64: back calculation constant for the anti-windup loop of the lower force controller Default: 1.0\nktf_low::Float64: tracking constant of the lower force controller Default: 8.0\nf_low::Float64: lower force limit [N] Default: 350\nf_reelin::Float64: set force for reel-in phase [N] Default: 700\nf_high::Float64: upper force limit [N] Default: 3800\npf_high::Float64: P constant of upper force controller Default: 0.000144 * 1.6\nif_high::Float64: I constant of upper force controller Default: 0.0075 * 1.6\ndf_high::Float64: D constant of upper force controller Default: 2.0e-5 * 1.7\nnf_high::Float64: filter constant n of upper force controller Default: 15.0\nkbf_high::Float64: back calculation constant for the anti-windup loop of the upper force controller Default: 1.0\nktf_high::Float64: tracking constant of the upper force controller Default: 10.0\nwinch_iter::Float64: interations of the winch model Default: 10\nmax_acc::Float64: maximal acceleration of the winch (derivative of the set value of the reel-out speed) Default: 8.0\ndamage_factor::Float64: damage at max acceleration Default: 0.2\njerk_factor::Float64: jerk factor for damage calculation Default: 0.9\nkv::Float64: proportional factor of the square root law, see function calc_vro Default: 0.06\n\n\n\n\n\n","category":"type"},{"location":"winchcontroller/#WinchControllers.calc_vro","page":"Winchcontroller","title":"WinchControllers.calc_vro","text":"calc_vro(wcs::WCSettings, force)\n\nCalculate the optimal reel-out speed for a given force. \n\nParameters\n\nwcs::WCSettings: the settings struct\nforce: the tether force at the winch\n\nReturns\n\nthe optimal reel-out speed\n\n\n\n\n\n","category":"function"},{"location":"winchcontroller/#Logger","page":"Winchcontroller","title":"Logger","text":"","category":"section"},{"location":"winchcontroller/#WinchControllers.WCLogger","page":"Winchcontroller","title":"WinchControllers.WCLogger","text":"mutable struct WCLogger{Q}\n\nStruct with the WinchController log vectors. Q is the number of  samples that can be logged. \n\nFields\n\nindex::Int64: Index of the next log entry Default: 1\ntime::Vector{Float64}: Vector of time stamps [s] Default: zeros(Float64, Q)\nv_wind::Vector{Float64}: wind speed [m/s] Default: zeros(Float64, Q)\nmax_force::Float64: Maximal winch force [N] Default: 0.0\nmax_acc::Float64: Maximal acceleration [m/s^2] Default: 0.0\ndamage_factor::Float64: damage at maximum acceleration Default: 0.0\njerk_factor::Float64: jerk factor for damage calculation Default: 0.0\nv_set_in::Vector{Float64}: set value of the reel-out speed, input of the speed controller [m/s] Default: zeros(Float64, Q)\nv_ro::Vector{Float64}: reel-out speed [m/s] Default: zeros(Float64, Q)\nv_set::Vector{Float64}: set reel-out speed, output of the speed controller [m/s] Default: zeros(Float64, Q)\nv_set_out::Vector{Float64}: set reel-out speed of the winch [m/s] Default: zeros(Float64, Q)\nforce::Vector{Float64}: force [N] Default: zeros(Float64, Q)\nf_err::Vector{Float64}: force error [N] Default: zeros(Float64, Q)\nacc::Vector{Float64}: acceleration [m/s^2] Default: zeros(Float64, Q)\nacc_set::Vector{Float64}: set acceleration [m/s^2] Default: zeros(Float64, Q)\njerk::Vector{Float64}: jerk [m/s^3] Default: zeros(Float64, Q)\nv_err::Vector{Float64}: reel-out speed error [m/s] Default: zeros(Float64, Q)\nreset::Vector{Int64}: reset flag Default: zeros(Int64, Q)\nactive::Vector{Int64}: active flag Default: zeros(Int64, Q)\nf_set::Vector{Float64}: set force [N] Default: zeros(Float64, Q)\nstate::Vector{Int64}: state of the controller Default: zeros(Int64, Q)\np_dyn::Vector{Float64}: dynamic, mechanical power [W] Default: zeros(Float64, Q)\n\n\n\n\n\n","category":"type"},{"location":"winchcontroller/#WinchControllers.WCLogger-Tuple{Any, Any}","page":"Winchcontroller","title":"WinchControllers.WCLogger","text":"WCLogger(duration, dt, max_force=0.0)\n\nCreate and initialize a logger for the winch controller system.\n\nArguments\n\nduration::Number: The total duration for which logging should occur. [s]\ndt::Number:       The time step interval between log entries. [s]\n\nReturns\n\nA logger object configured to record data at the specified interval for the given duration.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#Base.log-Tuple{WCLogger}","page":"Winchcontroller","title":"Base.log","text":"log(logger::WCLogger; v_wind=0.0, v_ro=0.0, v_set=0.0, v_set_in=0.0, v_set_out=0.0, force=0.0, f_err=0.0, \n    acc=0.0, acc_set=0.0, jerk=0.0, p_dyn=0.0)\n\nLogs the current state of the winch controller.\n\nArguments\n\nlogger::WCLogger: The logger instance used to record the data.\nv_wind: (Optional) The wind speed. Defaults to 0.0.\nv_ro: (Optional) The measured reel-out velocity. Defaults to 0.0.\nv_set: (Optional) The input of the speed controller. Defaults to 0.0.\nv_set_in: (Optional) The input of the speed controller. Defaults to 0.0.\nv_set_out: (Optional) The setpoint output velocity. Defaults to 0.0.\nforce: (Optional) The measured force. Defaults to 0.0.\nf_err: (Optional) The force error. Defaults to 0.0.\nacc: (Optional) The measured acceleration. Defaults to 0.0.\njerk: (Optional) The jerk value. Defaults to 0.0.\nacc_set: (Optional) The setpoint acceleration. Defaults to 0.0.\np_dyn: (Optional) The dynamic mechanical power. Defaults to 0.0.\n\nDescription\n\nThis function records the provided parameters to the logger for analysis of the winch controller's performance.\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.f_err","page":"Winchcontroller","title":"WinchControllers.f_err","text":"f_err(logger::WCLogger)\n\nCalculate the normalized maximal force error of a log.\n\nArguments\n\nlogger::WCLogger: The logger instance used to log error messages.\n\nReturns\n\nThe normalized maximal force error with respect to the maximum force of the winch.\n\n\n\n\n\n","category":"function"},{"location":"winchcontroller/#WinchControllers.v_err","page":"Winchcontroller","title":"WinchControllers.v_err","text":"v_err(logger::WCLogger)\n\nCalculate the normalized root mean square (RMS) of the reel-out speed error.\n\nArguments\n\nlogger::WCLogger: The logger object used to record the error message.\n\nReturns\n\nThe normalized RMS of the reel-out speed error with respect to the mean of the set values of the reel-out speed.\n\n\n\n\n\n","category":"function"},{"location":"winchcontroller/#WinchControllers.gamma","page":"Winchcontroller","title":"WinchControllers.gamma","text":"gamma(logger::WCLogger)\n\nCompute the combined performance indicator gamma for the test case used to create the provided logs, stored in the logger. See: Combined performance.\n\nArguments\n\nlogger::WCLogger: The logger object that shall be used to calculate gamma.\n\nReturns\n\nThe gamma value associated with the log of the used test case.\n\n\n\n\n\n","category":"function"},{"location":"winchcontroller/#Winch","page":"Winchcontroller","title":"Winch","text":"","category":"section"},{"location":"winchcontroller/","page":"Winchcontroller","title":"Winchcontroller","text":"Only used for testing the WinchController.","category":"page"},{"location":"winchcontroller/#WinchControllers.Winch","page":"Winchcontroller","title":"WinchControllers.Winch","text":"mutable struct Winch\n\nComponent, that calculates the acceleration of the tether based on the tether force and the set speed (= synchronous speed). Asynchronous motor model and drum inertia are taken into account. Used for testing of the winch controller.\n\nFields\n\nwcs::WCSettings\nset::KiteUtils.Settings\nwm::WinchModels.AsyncMachine: Default: AsyncMachine(set)\ninertia::Float64: Default: set.inertiatotal * set.gearratio ^ 2\nlast_omega::Float64: Default: 0.0\nv_set::Float64: Default: 0\nforce::Float64: Default: 0\nacc::Float64: Default: 0\njerk::Float64: Default: 0\nspeed::Float64: Default: 0\np_dyn::Float64: Default: 0\n\n\n\n\n\n","category":"type"},{"location":"winchcontroller/#WinchControllers.Winch-Tuple{WCSettings, KiteUtils.Settings}","page":"Winchcontroller","title":"WinchControllers.Winch","text":"function Winch(wcs::WCSettings, set::Settings)\n\nConstructor for a Winch struct, using the winch-controller settings and the general settings as parameters.\n\nParameters\n\nwcs::WCSettings: settings of the winch controller\nset::Settings: general settings\n\nReturns\n\na struct of type Winch\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_v_set-Tuple{Winch, Any}","page":"Winchcontroller","title":"WinchControllers.set_v_set","text":"function set_v_set(w::Winch, v_set)\n\nSet the reel-out speed of the winch.\n\nParameters\n\nw::Winch: struct of type Winch\nv_set: new set value of the reel-out speed [m/s]\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.set_force-Tuple{Winch, Any}","page":"Winchcontroller","title":"WinchControllers.set_force","text":"function set_force(w::Winch, force)\n\nSet the tether force at the winch.\n\nParameters\n\nw::Winch: struct of type Winch\nforce: new set value of the tether force [N]\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_speed-Tuple{Winch}","page":"Winchcontroller","title":"WinchControllers.get_speed","text":"function get_speed(w::Winch)\n\nRead the tether speed of the winch.\n\nParameters\n\nw::Winch: struct of type Winch\n\nReturns\n\nthe reel-out speed of the winch in m/s\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.get_acc-Tuple{Winch}","page":"Winchcontroller","title":"WinchControllers.get_acc","text":"function get_acc(w::Winch)\n\nDetermine the current acceleration of the winch.\n\nParameters\n\nw::Winch: struct of type Winch\n\nReturns\n\nacceleration of the winch in m/s²\n\n\n\n\n\n","category":"method"},{"location":"winchcontroller/#WinchControllers.on_timer-Tuple{Winch}","page":"Winchcontroller","title":"WinchControllers.on_timer","text":"on_timer(w::Winch)\n\nUpdate the winch. Must be called once per time-step. calculates and updates the winch acceleration w.acc using a loop.\n\nParameters\n\nw::Winch: Reference to the Winch component\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"#WinchControllers","page":"Home","title":"WinchControllers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for the package WinchControllers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is part of Julia Kite Power Tools, which consist of the following packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Julia Kite Power Tools)","category":"page"},{"location":"#Goals-of-this-package","page":"Home","title":"Goals of this package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The goal of this package is to provide controllers for winches that consist of a motor/generator connected to a drum (with or without gearbox). On the drum is a tether that is connected to a load or a kite. Currently operation in air is assumed, but the package could also be extended for winches connected to under-water cables. While the main use case of the author are airborne wind energy systems, I am open to add features needed for other use cases.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Implemented features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"lower force control (assure that there is always a minimal cable tension)\nupper force control (keep the maximal force limited)\nreel-out speed control proportional to the square root of the force (other relationships can easily be added)\ncontrol of asynchronous motors/ generators\nspeed control","category":"page"},{"location":"","page":"Home","title":"Home","text":"Planned features","category":"page"},{"location":"","page":"Home","title":"Home","text":"support of torque controlled winches\nlength control (position control)\nintegration of a quasi-steady tether model\nauto-tuning of the controller","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.10 or later, if you haven't already. On Linux, make sure that Python3 and Matplotlib are installed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sudo apt install python3-matplotlib","category":"page"},{"location":"","page":"Home","title":"Home","text":"Before installing this software it is suggested to create a new project, for example like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then add WinchControllers from  Julia's package manager, by typing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add WinchControllers\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt. You can run the unit tests with the command (careful, can take 60 min):","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg\"test WinchControllers\"","category":"page"},{"location":"#Provides","page":"Home","title":"Provides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a set of generic control components, see Generic Components\na winch controller WinchController, that limits the upper and lower force and controls the speed as function of the force\na winch controller settings struct WCSettings for the settings\nUtility Functions and Macros","category":"page"},{"location":"#See-also","page":"Home","title":"See also","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Research Fechner for the scientific background of this code\nThe meta-package  KiteSimulators\nthe package KiteUtils\nthe packages WinchModels and KitePodModels and AtmosphericModels\nthe packages KiteControllers and KiteViewers","category":"page"},{"location":"","page":"Home","title":"Home","text":"Author: Uwe Fechner (uwe.fechner.msc@gmail.com)","category":"page"}]
}
