var documenterSearchIndex = {"docs":
[{"location":"functions/","page":"Functions","title":"Functions","text":"CurrentModule = WinchControllers","category":"page"},{"location":"functions/#Input-functions","page":"Functions","title":"Input functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"set_vset_pc","category":"page"},{"location":"functions/#WinchControllers.set_vset_pc","page":"Functions","title":"WinchControllers.set_vset_pc","text":"set_vset_pc(cvi::CalcVSetIn, v_set_pc, force)\n\nParameters:\n\nforce:    measured tether force [N]\nvsetpc: only used during manual operation or park-at-length. If it is nothing,           vsetin is calculated as function of the force.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Output-functions","page":"Functions","title":"Output functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"calc_output\ncalc_vro\nget_state","category":"page"},{"location":"functions/#WinchControllers.calc_output","page":"Functions","title":"WinchControllers.calc_output","text":"calc_output(cvi::CalcVSetIn)\n\nReturns vsetin: Either v_set, or a value, proportional to the sqare root of the force.\n\n\n\n\n\n","category":"function"},{"location":"functions/#WinchControllers.calc_vro","page":"Functions","title":"WinchControllers.calc_vro","text":"Calculate the optimal reel-out speed for a given force. \n\n\n\n\n\n","category":"function"},{"location":"functions/#WinchControllers.get_state","page":"Functions","title":"WinchControllers.get_state","text":"Return the controller state as integer.\n\nwcsLowerForceControl = 0 # input b selected  wcsSpeedControl = 1      # input a selected wcsUpperForceControl = 2 # input c selected\n\n\n\n\n\n","category":"function"},{"location":"functions/#Utility-functions","page":"Functions","title":"Utility functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"@limit\nsaturate\nmerge_angles","category":"page"},{"location":"functions/#WinchControllers.@limit","page":"Functions","title":"WinchControllers.@limit","text":"Limit the value of a variable. \n\nUsage: @limit x 1 4 # limits the value to the range    1 .. 4,  modifies x @limit x 10  # limits the value to the range -inf .. 10, modifies x\n\n\n\n\n\n","category":"macro"},{"location":"functions/#WinchControllers.saturate","page":"Functions","title":"WinchControllers.saturate","text":"Calculate a saturated value, that stays within the given limits. \n\n\n\n\n\n","category":"function"},{"location":"functions/#WinchControllers.merge_angles","page":"Functions","title":"WinchControllers.merge_angles","text":"merge_angles(alpha, beta, factor_beta)\n\nCalculate the weighted average of two angles. The weight of beta, factor_beta must be between 0 and 1.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = WinchControllers","category":"page"},{"location":"#WinchControllers","page":"Home","title":"WinchControllers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for the package WinchControllers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is part of Julia Kite Power Tools, which consist of the following packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Julia Kite Power Tools)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.10 or later, if you haven't already. On Linux, make sure that Python3 and Matplotlib are installed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sudo apt install python3-matplotlib","category":"page"},{"location":"","page":"Home","title":"Home","text":"Before installing this software it is suggested to create a new project, for example like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then add WinchControllers from  Julia's package manager, by typing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add WinchControllers\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt. You can run the unit tests with the command (careful, can take 60 min):","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg\"test WinchControllers\"","category":"page"},{"location":"#Provides","page":"Home","title":"Provides","text":"","category":"section"},{"location":"#See-also","page":"Home","title":"See also","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Research Fechner for the scientic background of this code\nThe meta-package  KiteSimulators\nthe package KiteUtils\nthe packages WinchModels and KitePodModels and AtmosphericModels\nthe packages KiteControllers and KiteViewers","category":"page"},{"location":"","page":"Home","title":"Home","text":"Author: Uwe Fechner (uwe.fechner.msc@gmail.com)","category":"page"},{"location":"types/#Exported-Types","page":"Types","title":"Exported Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = WinchControllers","category":"page"},{"location":"types/#Control-components","page":"Types","title":"Control components","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Mixer_2CH","category":"page"},{"location":"types/#WinchControllers.Mixer_2CH","page":"Types","title":"WinchControllers.Mixer_2CH","text":"mutable struct Mixer_2CH\n\nMix two analog inputs. Implements the simulink block diagram, shown in docs/mixer_2ch.png.\n\nFields\n\ndt::Float64\nt_blend::Float64: Default: 1.0\nfactor_b::Float64: Default: 0\nselect_b::Bool: Default: false\n\n\n\n\n\n","category":"type"},{"location":"types/#Controller-and-settings","page":"Types","title":"Controller and settings","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"WinchController\nWCSettings","category":"page"},{"location":"types/#WinchControllers.WinchController","page":"Types","title":"WinchControllers.WinchController","text":"mutable struct WinchController\n\nBasic winch controller. Works in one of the three modes wcsLowerForceLimit, wcsSpeedControl and wcsUpperForceLimit.\n\nFields\n\nwcs::WCSettings\ntime::Float64: Default: 0\nv_set_pc::Union{Nothing, Float64}: Default: nothing\nv_set_in::Float64: Default: 0.0\nv_set_out::Float64: Default: 0.0\nv_set_ufc::Float64: Default: 0.0\nv_set_lfc::Float64: Default: 0.0\nv_set::Float64: Default: 0.0\nv_act::Float64: Default: 0.0\nforce::Float64: Default: 0.0\ncalc::WinchControllers.CalcVSetIn: Default: CalcVSetIn(wcs)\nmix3::WinchControllers.Mixer_3CH: Default: Mixer3CH(wcs.dt, wcs.tblend)\npid1::WinchControllers.SpeedController: Default: SpeedController(wcs)\npid2::WinchControllers.LowerForceController: Default: LowerForceController(wcs)\npid3::WinchControllers.UpperForceController: Default: UpperForceController(wcs)\n\n\n\n\n\n","category":"type"},{"location":"types/#WinchControllers.WCSettings","page":"Types","title":"WinchControllers.WCSettings","text":"Settings of the WinchController\n\n\n\n\n\n","category":"type"}]
}
